---
jobs:
- name: publish-unstable
  public: true
  build_logs_to_retain: 100
  plan:
  - aggregate:
    - get: ((repo))
      version: latest
      trigger: true
    - get: opx-build
  - task: git-buildpackage
    privileged: true
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: opxhub/build
          tag: unstable
      inputs:
      - name: ((repo))
      - name: opx-build
      outputs:
      - name: pkg
      params:
        REPO: ((repo))
      run:
        path: bash
        args:
        - -euc
        - |
          # workaround for hard-coded /mnt directory in opx_build script
          git clone $REPO /mnt/$REPO
          pushd /mnt/$REPO

          # bump version with date and git sha
          v="$(dpkg-parsechangelog -SVersion)"
          if [[ $v == *"+"* ]]; then s="."; else s="+"; fi
          v="${v}${s}git$(date +%Y%m%d).$(git rev-parse --short HEAD)"
          debchange \
            --newversion "$v" \
            --distribution unstable \
            --controlmaint \
            "$(git log --oneline -1)"
          dpkg-parsechangelog --count 1
          popd

          # build packages
          export PATH=$PATH:$PWD/opx-build/scripts
          pushd /mnt/
          opx_build $REPO
          ls -l *.deb *.build *.dsc *.tar.gz
          popd

          # copy packages to output
          cp -t pkg/ /mnt/*.deb /mnt/*.build /mnt/*.dsc /mnt/*.tar.gz
  - aggregate:
    - task: publish-debs
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: opxhub/concourse
        inputs:
        - name: pkg
        params:
          BINTRAY: ((bintray_username)):((bintray_apikey))
          DIST: unstable
          REPO: ((repo))
        run:
          path: bash
          args:
          - -euc
          - |
            shopt -s nullglob
            pushd pkg/
            files=( *.deb )
            version="$(echo ${files[0]} | perl -ne '/.*_(.*)_.*/ && print $1')"
            for file in "${files[@]}"; do
              echo -n "Publishing ${file}... "
              curl -T "$file" "https://$BINTRAY@api.bintray.com/content/open-switch/opx-apt/$REPO/$version/pool/$DIST/$REPO/$file;deb_distribution=${DIST};deb_component=main;deb_architecture=amd64;publish=1"
              echo
            done
    - task: aptly-publish
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: opxhub/concourse
        params:
          API: http://aptly-aptly.deb:8080/api
          DIST: unstable
          REPO: ((repo))
        inputs:
        - name: pkg
        run:
          path: bash
          args:
          - -euc
          - |
            shopt -s nullglob
            upload_dir="${REPO}_$(date +%s)"
            cleanup() {
              echo -n "Cleaning up... "
              curl -sf -XDELETE $API/files/$upload_dir | jq '.'
              echo
            }
            trap cleanup EXIT
            for f in pkg/*; do
              echo -n "Uploading $f... "
              curl -sf -XPOST -F file=@$f $API/files/$upload_dir
              echo
            done
            echo "Listing uploaded files for confirmation."
            curl -sf $API/files/$upload_dir | jq '.'
            echo "Adding new files to $DIST."
            # TODO: add error handling with jq and .FailedFiles
            curl -sf -XPOST $API/repos/opx-$DIST/file/$upload_dir | jq '.'
            echo "Publishing updated repository."
            curl -sf -XPUT $API/publish/filesystem:public:./$DIST | jq '.'
  on_failure:
    put: send-failure-email
    params:
      subject_text: "${BUILD_JOB_NAME} for ${BUILD_PIPELINE_NAME} failed"
      body_text: "${ATC_EXTERNAL_URL}/teams/${BUILD_TEAM_NAME}/pipelines/${BUILD_PIPELINE_NAME}/jobs/${BUILD_JOB_NAME}/builds/${BUILD_NAME}"

- name: publish-testing
  public: true
  build_logs_to_retain: 100
  plan:
  - aggregate:
    - get: ((repo))-tag
      version: latest
      trigger: true
    - get: opx-build
  - task: git-buildpackage
    privileged: true
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: opxhub/build
          tag: testing
      inputs:
      - name: ((repo))-tag
        path: ((repo))
      - name: opx-build
      outputs:
      - name: pkg
      params:
        REPO: ((repo))
      run:
        path: bash
        args:
        - -euc
        - |
          # workaround for hard-coded /mnt directory in opx_build script
          git clone $REPO /mnt/$REPO
          pushd /mnt/$REPO
          dpkg-parsechangelog --count 1
          popd

          # build packages
          export PATH=$PATH:$PWD/opx-build/scripts
          pushd /mnt/
          opx_build $REPO
          ls -l *.deb *.build *.dsc *.tar.gz
          popd

          # copy packages to output
          cp -t pkg/ /mnt/*.deb /mnt/*.build /mnt/*.dsc /mnt/*.tar.gz
  - aggregate:
    - task: publish-debs
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: opxhub/concourse
        inputs:
        - name: pkg
        params:
          BINTRAY: ((bintray_username)):((bintray_apikey))
          DIST: testing
          REPO: ((repo))
        run:
          path: bash
          args:
          - -euc
          - |
            shopt -s nullglob
            pushd pkg/
            files=( *.deb )
            version="$(echo ${files[0]} | perl -ne '/.*_(.*)_.*/ && print $1')"
            for file in "${files[@]}"; do
              echo -n "Publishing ${file}... "
              curl -T "$file" "https://$BINTRAY@api.bintray.com/content/open-switch/opx-apt/$REPO/$version/pool/$DIST/$REPO/$file;deb_distribution=${DIST};deb_component=main;deb_architecture=amd64;publish=1"
              echo
            done
    - task: aptly-publish
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: opxhub/concourse
        params:
          API: http://aptly-aptly.deb:8080/api
          DIST: testing
          REPO: ((repo))
        inputs:
        - name: pkg
        - name: ((repo))-tag
          path: ((repo))
        run:
          path: bash
          args:
          - -euc
          - |
            shopt -s nullglob
            upload_dir="${REPO}_$(date +%s)"
            cleanup() {
              echo -n "Cleaning up... "
              curl -sf -XDELETE $API/files/$upload_dir | jq '.'
              echo
            }
            trap cleanup EXIT
            for f in pkg/*; do
              echo -n "Uploading $f... "
              curl -sf -XPOST -F file=@$f $API/files/$upload_dir
              echo
            done
            echo "Listing uploaded files for confirmation."
            curl -sf $API/files/$upload_dir | jq '.'
            echo "Adding new files to $DIST."
            # TODO: add error handling with jq and .FailedFiles
            curl -sf -XPOST $API/repos/opx-$DIST/file/$upload_dir | jq '.'
            echo "Publishing updated repository."
            curl -sf -XPUT $API/publish/filesystem:public:./$DIST | jq '.'
            # echo "Publishing to stable as well."
            # VER="$(cd $REPO; dpkg-parsechangelog -SVersion)"
            # pkgs="$(curl -s ''$API'/repos/opx-testing/packages?q='$REPO'%20(%3D%20'$VER')|($Source%20('$REPO'),Version%20(%3D%20'$VER'))')"
            # echo $pkgs | jq '.'
            # curl -sf -XPOST -H'Content-Type: application/json' --data \
            #   '{"PackageRefs": '"$pkgs"'}' \
            #    "$API/repos/opx-stable/packages" | jq '.'
            # curl -sf -XPUT $API/publish/filesystem:public:./stable | jq '.'
  on_failure:
    put: send-failure-email
    params:
      subject_text: "${BUILD_JOB_NAME} for ${BUILD_PIPELINE_NAME} failed"
      body_text: "${ATC_EXTERNAL_URL}/teams/${BUILD_TEAM_NAME}/pipelines/${BUILD_PIPELINE_NAME}/jobs/${BUILD_JOB_NAME}/builds/${BUILD_NAME}"

resources:
- name: ((repo))
  type: git
  source:
    uri: git://github.com/open-switch/SAI
    branch: "dell.1.2+"
- name: ((repo))-tag
  type: git
  source:
    uri: git://github.com/open-switch/SAI
    tag_filter: "debian/*"
- name: opx-build
  type: git
  source:
    uri: git://git.openswitch.net/opx/opx-build
    branch: master
- name: send-failure-email
  type: email
  source:
    smtp:
      host: email-smtp.us-west-2.amazonaws.com
      port: "587"
      username: ((smtp_username))
      password: ((smtp_password))
    from: opx@openswitch.net
    to:
    -  tyler.heucke@dell.com

resource_types:
- name: email
  type: docker-image
  source:
    repository: pcfseceng/email-resource
